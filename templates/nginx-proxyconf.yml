apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-proxyconf
data:
  peertubesite.conf: |-
    server {
      listen {{ .Values.ports.nginxproxyPort }} default_server;
      listen [::]:{{ .Values.ports.nginxproxyPort }} default_server;
      server_name _;

      error_log  /var/log/nginx/error.log warn;
      access_log  /var/log/nginx/access.log  main;

      # Enable compression for JS/CSS/HTML bundle, for improved client load times.
      # It might be nice to compress JSON, but leaving that out to protect against potential
      # compression+encryption information leak attacks like BREACH.
      gzip on;
      gzip_types text/css application/javascript;
      gzip_vary on;

      # If you have a small /var/lib partition, it could be interesting to store temp nginx uploads in a different place
      # See https://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_temp_path
      client_body_temp_path /nginxtemp;

      # Bypass PeerTube for performance reasons. Could be removed
      location ~ ^/client/(.*\.(js|css|png|svg|woff2|otf|ttf|woff|eot))$ {
        add_header Cache-Control "public, max-age=31536000, immutable";

        alias /assets/$1;
      }

      # Bypass PeerTube for performance reasons. Could be removed
      location ~ ^/static/(thumbnails|avatars)/ {
        if ($request_method = 'OPTIONS') {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
          add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
          add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain charset=UTF-8';
          add_header 'Content-Length' 0;
          return 204;
        }

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

        # Cache 2 hours
        add_header Cache-Control "public, max-age=7200";

        root /data;

        rewrite ^/static/(thumbnails|avatars)/(.*)$ /$1/$2 break;
        try_files $uri /;
      }

      location / {
        proxy_pass http://127.0.0.1:{{ .Values.ports.peertubePort }};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # This is the maximum upload size, which roughly matches the maximum size of a video file
        # you can send via the API or the web interface. By default this is 8GB, but administrators
        # can increase or decrease the limit. Currently there's no way to communicate this limit
        # to users automatically, so you may want to leave a note in your instance 'about' page if
        # you change this.
        #
        # Note that temporary space is needed equal to the total size of all concurrent uploads.
        # This data gets stored in /var/lib/nginx by default, so you may want to put this directory
        # on a dedicated filesystem.
        #
        client_max_body_size {{ .Values.nginxproxy.maxbodysize }};

        # Default timeout to 50m to allow large upload with slow connection
        proxy_connect_timeout       3000;
        proxy_send_timeout          3000;
        proxy_read_timeout          3000;
        send_timeout                3000;
      }

      # Bypass PeerTube for performance reasons. Could be removed
      location ~ ^/static/(webseed|redundancy|streaming-playlists)/ {
        # Clients usually have 4 simultaneous webseed connections, so the real limit is 4MB/s per client
        set $peertube_limit_rate 1000k;

        # Increase rate limit in HLS mode, because we don't have multiple simultaneous connections
        if ($request_uri ~ -fragmented.mp4$) {
          set $peertube_limit_rate 5000k;
        }

        # Use this with nginx >= 1.17.0
        limit_rate $peertube_limit_rate;

        if ($request_method = 'OPTIONS') {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
          add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
          add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain charset=UTF-8';
          add_header 'Content-Length' 0;
          return 204;
        }

        if ($request_method = 'GET') {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
          add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

          # Don't spam access log file with byte range requests
          access_log off;
        }

        root /data;

        rewrite ^/static/webseed/(.*)$ /videos/$1 break;
        rewrite ^/static/redundancy/(.*)$ /redundancy/$1 break;
        rewrite ^/static/streaming-playlists/(.*)$ /streaming-playlists/$1 break;

        try_files $uri /;
      }

      # Websocket tracker
      location /tracker/socket {
        # Peers send a message to the tracker every 15 minutes
        # Don't close the websocket before this time
        proxy_read_timeout 1200s;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_pass http://127.0.0.1:{{ .Values.ports.peertubePort }};
      }

      location /socket.io {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        proxy_pass http://127.0.0.1:{{ .Values.ports.peertubePort }};

        # enable WebSockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }
    }
